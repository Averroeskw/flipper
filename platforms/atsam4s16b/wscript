# Platform build script.

# Target: Atmel ATSAM4S16B

def configure(cfg):
    cfg.setenv('platform-atsam4s16b')
    # Set the target name.
    cfg.env.TARGET = 'atsam4s16b'
    # Build osmium for the platform.
    cfg.env.BUILD_OSMIUM = True
    # Build modules for this platform.
    cfg.env.BUILD_MODULES = True
    # Set the platform flags.
    cfg.env.append_value('CFLAGS', ['-std=c99', '-Os', '-nostartfiles', '-ffreestanding', '-mthumb', '-mcpu=cortex-m4'])
    cfg.env.append_value('LDFLAGS', '--specs=rdimon.specs')
    # Load the appropriate binary utilities.
    cfg.find_program('arm-none-eabi-objcopy', var='OBJCOPY')
    # Load the appropriate archiver.
    cfg.find_program('arm-none-eabi-ar', var='AR')
     # Load the appropriate assembler.
    cfg.find_program('arm-none-eabi-as', var='AS')
    cfg.env.AS_TGT_F = ['-c', '-o']
    cfg.env.ASLNK_TGT_F = ['-o']
    cfg.load('asm')
    # Load the appropriate C compiler.
    cfg.find_program('arm-none-eabi-gcc', var='CC')
    cfg.load('gcc')

def build(bld):
    _env = bld.all_envs['platform-atsam4s16b']
    bld.stlib(source = bld.path.ant_glob('src/**'), target = 'platform-atsam4s16b', env = _env)

def upload(ctx):
    pass
