# Platform build script.

# Target: Atmel ATSAM4S16B

def configure(cfg):
	cfg.setenv('platform-atsam4s16b')
	# Set the target name.
	cfg.env.TARGET = 'atsam4s16b'
	# Build osmium for the platform.
	cfg.env.BUILD_OSMIUM = True
	# Build modules for this platform.
	cfg.env.BUILD_MODULES = True
	# Set the platform flags.
	cfg.env.append_value('CFLAGS', ['-std=c99', '-Os', '-mcpu=cortex-m4', '-march=armv7e-m', '-mthumb', '-g', '-DPLATFORM_HEADER=<platform/atsam4s16b.h>'])
	cfg.env.append_value('LDFLAGS', ['-Wl,-T' + cfg.path.abspath() + '/sam4s16.ld', '-nostartfiles'])
	# Catalog the start files
	cfg.env.STARTFILES = str(cfg.path.find_node('board_cstartup_gnu.c').relpath())
	#print "Startfiles are: " + str(cfg.env.STARTFILES)
	# Load the appropriate binary utilities.
	cfg.env.OBJCOPY = cfg.find_program('arm-none-eabi-objcopy')
	# Load the appropriate archiver.
	cfg.env.AR = cfg.find_program('arm-none-eabi-ar')
	# Load the appropriate assembler.
	cfg.env.AS = cfg.find_program('arm-none-eabi-gcc')
	cfg.env.AS_TGT_F = ['-c', '-o']
	cfg.env.ASLNK_TGT_F = ['-o']
	cfg.load('asm')
	# Load the appropriate C compiler.
	cfg.env.CC = cfg.find_program('arm-none-eabi-gcc')
	cfg.load('gcc')
	# Check for newlib.
	cfg.check_cc(linkflags = '--specs=nosys.specs', lib = 'c')

def build(bld):
	_env = bld.all_envs['platform-atsam4s16b']
	bld.stlib(source = bld.path.ant_glob('src/**') + bld.path.ant_glob('lib/**'), target = 'platform-atsam4s16b', env = _env)

def upload(ctx):
	pass
